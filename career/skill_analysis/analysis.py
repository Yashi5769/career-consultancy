# -*- coding: utf-8 -*-
"""user _profile_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RzOW6hayK-RML1LGiOM4jAkuxGxwNMiR
"""

import pandas as pd
import json
import re
from sentence_transformers import SentenceTransformer, util

def clean_text(text):
    if not isinstance(text, str):
        return ""
    text = re.sub(r'\b(summary|objective)\b[:\-]*', '', text, flags=re.IGNORECASE)
    text = re.sub(r'\d+', '', text)  # remove standalone numbers
    text = re.sub(r'\s+', ' ', text)  # collapse multiple spaces
    return text.strip()

df = pd.read_csv("extracted_data.csv")
df = df.dropna(subset=["Resume_str"])

with open("skills.json") as f:
    skills_data = json.load(f)

technical_skills = set(skills_data["technical_skills"])
soft_skills = set(skills_data["soft_skills"])

with open("label_role.json") as f:
    label_role = json.load(f)

# SBERT model for role matching
roles = list(label_role.keys())
model = SentenceTransformer("all-MiniLM-L6-v2")
role_embeddings = model.encode(roles, convert_to_tensor=True)

# Skill extraction function
def extract_skills(text):
    found_tech = []
    found_soft = []
    if isinstance(text, str):
        text_lower = text.lower()
        for skill in technical_skills:
            if re.search(r'\b' + re.escape(skill.lower()) + r'\b', text_lower):
                found_tech.append(skill)
        for skill in soft_skills:
            if re.search(r'\b' + re.escape(skill.lower()) + r'\b', text_lower):
                found_soft.append(skill)
    return found_tech, found_soft

# Role/domain matching function
def match_role(text):
    if not text or str(text).strip() == "":
        return "unknown", "unknown", 0.0
    resume_embedding = model.encode(str(text), convert_to_tensor=True)
    scores = util.cos_sim(resume_embedding, role_embeddings)[0]
    best_idx = scores.argmax().item()
    best_score = scores[best_idx].item()
    matched_role = roles[best_idx]
    matched_domain = label_role.get(matched_role, "unknown").lower()
    if best_score < 0.4:
        return "unknown", "unknown", round(best_score, 3)
    return matched_role, matched_domain, round(best_score, 3)

# Processing each resume
def process_resume_row(row):
    resume_text = f"{row.get('job_title', '')} {row.get('Resume_str', '')}"
    matched_role, matched_domain, sim_score = match_role(resume_text)
    tech_skills, soft_skills_found = extract_skills(row["Resume_str"])

    return pd.Series({
        "Matched Role": matched_role,
        "Matched Domain": matched_domain,
        "Similarity Score": sim_score,
        "Technical Skills": ", ".join(tech_skills),
        "Soft Skills": ", ".join(soft_skills_found)
    })

# Apply to all rows
results_df = df.copy()
results_df = results_df.join(results_df.apply(process_resume_row, axis=1))

# Save output
results_df.to_csv("resume_skill_role_analysis.csv", index=False)
print("Final output saved to: resume_skill_role_analysis.csv")

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
results_df['Category_clean'] = results_df['Category'].str.lower().str.strip()
results_df['Matched Domain_clean'] = results_df['Matched Domain'].str.lower().str.strip()
filtered_df = results_df[
    (results_df['Matched Domain_clean'] != 'unknown') &
    results_df['Category_clean'].notnull()
]
# Accuracy
accuracy = accuracy_score(filtered_df['Category_clean'], filtered_df['Matched Domain_clean'])
print(f"\nAccuracy: {accuracy:.2%}")

print("\nClassification Report:")
print(classification_report(filtered_df['Category_clean'], filtered_df['Matched Domain_clean']))

print("\nConfusion Matrix:")
print(confusion_matrix(filtered_df['Category_clean'], filtered_df['Matched Domain_clean']))

sample_row = df.iloc[86]
result = process_resume_row(sample_row)
print("\nSample Resume Analysis")
print("--------------------------")
print(f"Job Title         : {sample_row['job_title']}")
print(f"Matched Role      : {result['Matched Role']}")
print(f"Matched Domain    : {result['Matched Domain']}")
print(f"Similarity Score  : {result['Similarity Score']}")
print()
print(f"Technical Skills  : {result['Technical Skills']}")
print(f"Soft Skills       : {result['Soft Skills']}")

