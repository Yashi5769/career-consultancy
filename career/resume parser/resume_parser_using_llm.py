# -*- coding: utf-8 -*-
"""Resume_Parser_Using_LLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_MPjS_8qbNadXLs6NcDSKNc8vzjnCFU
"""

import pip
import os
import json
import requests
import PyPDF2

# Replace 'YOUR_GEMINI_API_KEY' with your actual API key
# It's recommended to load this from an environment variable for security in real applications.
# Example: GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_API_KEY = "AIzaSyBq34CiWBjyqDO4fFkrbyaF0DNWGleK7JE"

if GEMINI_API_KEY == "YOUR_GEMINI_API_KEY" or not GEMINI_API_KEY:
    print("WARNING: Please replace 'YOUR_GEMINI_API_KEY' with your actual Gemini API key.")
    print("You can get one from https://aistudio.google.com/ or Google Cloud Console.")

# Cell 3: Function to Extract Text from PDF

def extract_text_from_pdf(pdf_path):
    """
    Extracts text from a PDF file.

    Args:
        pdf_path (str): The file path to the PDF document.

    Returns:
        str: The extracted text from the PDF, or None if an error occurs.
    """
    text = ""
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                text += page.extract_text() or "" # Use empty string if extract_text returns None
        return text
    except FileNotFoundError:
        print(f"Error: PDF file not found at '{pdf_path}'")
        return None
    except PyPDF2.errors.PdfReadError:
        print(f"Error: Could not read PDF file '{pdf_path}'. It might be corrupted or encrypted.")
        return None
    except Exception as e:
        print(f"An unexpected error occurred during PDF text extraction: {e}")
        return None

# Example Usage (you'll use this in the final cell)
# pdf_text = extract_text_from_pdf("path/to/your/resume.pdf")
# if pdf_text:
#     print("PDF text extracted successfully!")

# Cell 4: Function to Parse Resume with Gemini Model

def parse_resume_with_gemini(resume_text, api_key):
    """
    Sends resume text to the Gemini model for parsing skills, job title, and experience.

    Args:
        resume_text (str): The full text content of the resume.
        api_key (str): Your Gemini API key.

    Returns:
        dict: A dictionary containing 'skills', 'job_title', and 'experience',
              or an error dictionary if the API call fails.
    """
    if not resume_text:
        return {"error": "No resume text provided for parsing."}
    if not api_key or api_key == "YOUR_GEMINI_API_KEY":
        return {"error": "Gemini API key is missing or invalid. Please set it in Cell 2."}

    # Define the prompt for the Gemini model
    prompt = f"""
    You are a highly accurate resume parsing AI.
    From the following resume text, extract the 'skills', 'job_title', and 'experience'.

    'skills' should be a list of key technical and soft skills mentioned in the resume.
    'job_title' should be the most recent or prominent job title found.
    'experience' should be a concise summary of the work experience section, including companies, roles, and durations if available. If no specific experience section is found, summarize any work-related details.

    Provide the output in a JSON format with the following structure:
    {{
        "skills": ["skill1", "skill2", ...],
        "job_title": "Job Title",
        "experience": "Detailed summary of work experience."
    }}

    Resume Text:
    ---
    {resume_text}
    ---
    """

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"

    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "responseMimeType": "application/json",
            "responseSchema": {
                "type": "OBJECT",
                "properties": {
                    "skills": { "type": "ARRAY", "items": { "type": "STRING" } },
                    "job_title": { "type": "STRING" },
                    "experience": { "type": "STRING" }
                },
                "propertyOrdering": ["skills", "job_title", "experience"] # Ensure order
            }
        }
    }

    try:
        response = requests.post(api_url, headers={"Content-Type": "application/json"}, data=json.dumps(payload))
        response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)
        result = response.json()

        if result.get("candidates") and result["candidates"][0].get("content") and result["candidates"][0]["content"].get("parts"):
            # The model returns the JSON as a string within the 'text' part
            json_string = result["candidates"][0]["content"]["parts"][0]["text"]
            parsed_data = json.loads(json_string)
            return parsed_data
        else:
            print("Unexpected Gemini API response structure.")
            return {"error": "Unexpected API response from Gemini."}
    except requests.exceptions.RequestException as e:
        print(f"Error calling Gemini API: {e}")
        return {"error": f"API call failed: {e}"}
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON from Gemini API: {e}")
        return {"error": f"JSON parsing failed: {e}. Raw response: {response.text if 'response' in locals() else 'No response'}"}
    except Exception as e:
        print(f"An unexpected error occurred during Gemini parsing: {e}")
        return {"error": f"An unexpected error occurred: {e}"}


# 1. Get the PDF file path from the user
pdf_file_path = input("Please enter the full path to your resume PDF file: ")

# 2. Extract text from the PDF
print(f"\nAttempting to extract text from: {pdf_file_path}")
resume_text = extract_text_from_pdf(pdf_file_path)

if resume_text:
    print("\nPDF text extracted successfully. Sending to Gemini model...")
    # 3. Parse the resume text using the Gemini model
    parsed_data = parse_resume_with_gemini(resume_text, GEMINI_API_KEY)

    # 4. Display the results
    print("\n--- Resume Parsing Results ---")
    if "error" in parsed_data:
        print(f"Error: {parsed_data['error']}")
    else:
        print(f"Job Title: {parsed_data.get('job_title', 'N/A')}")
        print("\nSkills:")
        skills = parsed_data.get('skills', [])
        if skills:
            for skill in skills:
                print(f"- {skill}")
        else:
            print("  No skills extracted.")

        print("\nExperience:")
        experience = parsed_data.get('experience', 'N/A')
        print(experience)
    print("----------------------------")
else:
    print("\nCould not extract text from the PDF. Please check the file path and ensure it's a valid, readable PDF.")

